install.packages("pak")
pak::pak("mlr-org/mlr3torch")
file.path()
root <- file.path(tempdir(), "correlation")
root
?file.path
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
load("./data/rats_long.Rdata")
library(nlme)
modlme_rats_ri <- lme(head_length ~ time, random = ~ 1 | subject,
data = rats_long,
na.action = na.omit)
modlme_rats_ri
marginal_varcov_samerat <- getVarCov(modlme_rats_ri, type = "marginal")
marginal_varcov_samerat
marginal_varcov_samerat[[1]][1, 2] + (modlme_rats_ri$sigma ^ 2) == marginal_varcov_samerat[[1]][1, 1]
marginal_corr_samerat <- marginal_varcov_samerat[[1]] / marginal_varcov_samerat[[1]][1, 1]
marginal_corr_samerat
cond_varcov_samerat <- getVarCov(modlme_rats_ri, type = "conditional")
cond_varcov_samerat
cond_varcov_samerat_diag <- diag(cond_varcov_samerat[[1]])
# confirm that the diagonal entries are equal to the residual variance
all.equal(rep(modlme_rats_ri$sigma ^ 2, times = length(cond_varcov_samerat_diag)),
as.vector(cond_varcov_samerat_diag))
cond_corr_samerat <- cond_varcov_samerat[[1]] / cond_varcov_samerat[[1]][1, 1]
cond_corr_samerat
# helper function to count the number of measurements
n_measurements <- function(col) {
sum(!is.na(col))
}
# filter the data and perform the log transformation of time
rats_long_min3 <- rats_long |>
group_by(subject) |>
filter(n_measurements(head_length) >= 3) |>
mutate(logT = log(1 + (time - 45)/10))
rats_long_grouped <- groupedData(head_length ~ logT | subject, data = rats_long_min3)
modlist_rats_rs <- lmList(rats_long_grouped, na.action = na.omit)
modlist_rats_rs
plot(intervals(modlist_rats_rs))
modlme_rats_rs <- lme(fixed = head_length ~ logT, random = ~ logT | subject,
data = rats_long_min3,
na.action = na.omit)
modlme_rats_rs
varcov_modlme_rs <- getVarCov(modlme_rats_rs, type = "random.effects")
varcov_modlme_rs
corr_ri_rs <- varcov_modlme_rs[1, 2] / (2.0063 * 0.0002246)
plot(compareFits(coef(modlme_rats_rs), coef(modlist_rats_rs)))
comparePred(modlme_rats_rs, modlist_rats_rs,
primary = ~ logT)
comparePred(modlme_rats_rs, modlist_rats_rs)
modlme_rats_rs <- lme(fixed = head_length ~ logT, random = ~ logT | subject,
data = rats_long_grouped,
na.action = na.omit)
modlme_rats_rs
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
load("./data/rats_long.Rdata")
library(nlme)
modlme_rats_ri <- lme(head_length ~ time, random = ~ 1 | subject,
data = rats_long,
na.action = na.omit)
modlme_rats_ri
marginal_varcov_samerat <- getVarCov(modlme_rats_ri, type = "marginal")
marginal_varcov_samerat
marginal_varcov_samerat[[1]][1, 2] + (modlme_rats_ri$sigma ^ 2) == marginal_varcov_samerat[[1]][1, 1]
marginal_corr_samerat <- marginal_varcov_samerat[[1]] / marginal_varcov_samerat[[1]][1, 1]
marginal_corr_samerat
cond_varcov_samerat <- getVarCov(modlme_rats_ri, type = "conditional")
cond_varcov_samerat
cond_varcov_samerat_diag <- diag(cond_varcov_samerat[[1]])
# confirm that the diagonal entries are equal to the residual variance
all.equal(rep(modlme_rats_ri$sigma ^ 2, times = length(cond_varcov_samerat_diag)),
as.vector(cond_varcov_samerat_diag))
cond_corr_samerat <- cond_varcov_samerat[[1]] / cond_varcov_samerat[[1]][1, 1]
cond_corr_samerat
# helper function to count the number of measurements
n_measurements <- function(col) {
sum(!is.na(col))
}
# filter the data and perform the log transformation of time
rats_long_min3 <- rats_long |>
group_by(subject) |>
filter(n_measurements(head_length) >= 3) |>
mutate(logT = log(1 + (time - 45)/10))
rats_long_grouped <- groupedData(head_length ~ logT | subject, data = rats_long_min3)
modlist_rats_rs <- lmList(rats_long_grouped, na.action = na.omit)
modlist_rats_rs
plot(intervals(modlist_rats_rs))
modlme_rats_rs <- lme(fixed = head_length ~ logT, random = ~ logT | subject,
data = rats_long_grouped,
na.action = na.omit)
modlme_rats_rs
varcov_modlme_rs <- getVarCov(modlme_rats_rs, type = "random.effects")
varcov_modlme_rs
corr_ri_rs <- varcov_modlme_rs[1, 2] / (2.0063 * 0.0002246)
plot(compareFits(coef(modlme_rats_rs), coef(modlist_rats_rs)))
comparePred(modlme_rats_rs, modlist_rats_rs)
?Nlme
?nlme
modlme_rats_rs <- lme(fixed = head_length ~ logT,
data = rats_long_grouped,
na.action = na.omit)
modlme_rats_rs
, random = ~ logT | subject
modlme_rats_rs
modlme_rats_rs <- lme(fixed = head_length ~ logT,
data = rats_long_grouped,
na.action = na.omit)
modlme_rats_rs
varcov_modlme_rs <- getVarCov(modlme_rats_rs, type = "random.effects")
varcov_modlme_rs
corr_ri_rs <- varcov_modlme_rs[1, 2] / (2.0063 * 0.0002246)
plot(compareFits(coef(modlme_rats_rs), coef(modlist_rats_rs)))
comparePred(modlme_rats_rs, modlist_rats_rs)
length(modlme_rats_rs)
length(modlist_rats_rs)
comparePred(modlme_rats_rs, modlist_rats_rs,
length.out = 2)
?comparePred
predict(modlme_rats_rs)
predict(modlist_rats_rs)
comparePred(predict(modlme_rats_rs), predict(modlist_rats_rs))
comparePred(modlme_rats_rs, modlist_rats_rs)
comparePred(modlme_rats_rs, modlist_rats_rs)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
load("./data/rats_long.Rdata")
library(nlme)
modlme_rats_ri <- lme(head_length ~ time, random = ~ 1 | subject,
data = rats_long,
na.action = na.omit)
modlme_rats_ri
marginal_varcov_samerat <- getVarCov(modlme_rats_ri, type = "marginal")
marginal_varcov_samerat
marginal_varcov_samerat[[1]][1, 2] + (modlme_rats_ri$sigma ^ 2) == marginal_varcov_samerat[[1]][1, 1]
marginal_corr_samerat <- marginal_varcov_samerat[[1]] / marginal_varcov_samerat[[1]][1, 1]
marginal_corr_samerat
cond_varcov_samerat <- getVarCov(modlme_rats_ri, type = "conditional")
cond_varcov_samerat
cond_varcov_samerat_diag <- diag(cond_varcov_samerat[[1]])
# confirm that the diagonal entries are equal to the residual variance
all.equal(rep(modlme_rats_ri$sigma ^ 2, times = length(cond_varcov_samerat_diag)),
as.vector(cond_varcov_samerat_diag))
cond_corr_samerat <- cond_varcov_samerat[[1]] / cond_varcov_samerat[[1]][1, 1]
cond_corr_samerat
# helper function to count the number of measurements
n_measurements <- function(col) {
sum(!is.na(col))
}
# filter the data and perform the log transformation of time
rats_long_min3 <- rats_long |>
group_by(subject) |>
filter(n_measurements(head_length) >= 3) |>
mutate(logT = log(1 + (time - 45)/10))
rats_long_grouped <- groupedData(head_length ~ logT | subject, data = rats_long_min3)
modlist_rats_rs <- lmList(rats_long_grouped, na.action = na.omit)
modlist_rats_rs
plot(intervals(modlist_rats_rs))
modlme_rats_rs <- lme(fixed = head_length ~ logT,
data = rats_long_grouped,
na.action = na.omit)
modlme_rats_rs
varcov_modlme_rs <- getVarCov(modlme_rats_rs, type = "random.effects")
varcov_modlme_rs
corr_ri_rs <- varcov_modlme_rs[1, 2] / (2.0063 * 0.0002246)
plot(compareFits(coef(modlme_rats_rs), coef(modlist_rats_rs)))
comparePred(modlme_rats_rs, modlist_rats_rs)
modlme_rats_rs <- lme(fixed = head_length ~ logT, random = ~ logT | subject,
data = rats_long_grouped,
na.action = na.omit)
modlme_rats_rs
varcov_modlme_rs <- getVarCov(modlme_rats_rs, type = "random.effects")
varcov_modlme_rs
corr_ri_rs <- varcov_modlme_rs[1, 2] / (2.0063 * 0.0002246)
plot(compareFits(coef(modlme_rats_rs), coef(modlist_rats_rs)))
comparePred(modlme_rats_rs, modlist_rats_rs)
